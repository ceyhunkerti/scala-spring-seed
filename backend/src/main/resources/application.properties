server.port = 9090

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "artmon"
# spring.datasource.url = jdbc:oracle:thin:@172.26.112.42:1521:PDWH0
# spring.datasource.url = jdbc:oracle:thin:@localhost:32770:orcl
# spring.datasource.url = jdbc:hsqldb:file:db/ocotpus
# spring.datasource.url = jdbc:h2:./db/ocotpus

spring.datasource.url = ${app.datasource.url}

# Username and password
spring.datasource.username = ${app.datasource.username}
spring.datasource.password = ${app.datasource.password}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
# spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.OracleDialect
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.HSQLDialect

spring.jpa.properties.hibernate.dialect = ${app.jpa.properties.hibernate.dialect}



spring.datasource.tomcat.max-active=1000
spring.datasource.tomcat.max-idle=50
spring.datasource.tomcat.min-idle=10


spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

management.shell.auth.type = simple
management.shell.auth.simple.user.name=${app.shell.auth.simple.user.name}
management.shell.auth.simple.user.password=${app.shell.auth.simple.user.password}
management.shell.ssh.port= ${app.shell.ssh.port}




spring.output.ansi.enabled=ALWAYS


logging.level.io.blue.query=DEBUG
logging.level.io.blue.executer=DEBUG
# logging.level.io.blue.actor.SessionActor=DEBUG
# logging.level.io.blue.job=DEBUG
logging.level.io.blue.service=DEBUG
# logging.level.io.blue.search=DEBUG

# ART run treshold
app.config.art.treshold=${app.config.art.treshold}


# ODI
app.connection.odi.url=${app.connection.odi.url}
app.connection.odi.work.name=${app.connection.odi.work.name}
app.connection.odi.master.username=${app.connection.odi.master.username}
app.connection.odi.master.password=${app.connection.odi.master.password}
app.connection.odi.user.username=${app.connection.odi.user.username}
app.connection.odi.user.password=${app.connection.odi.user.password}

# DB
app.connection.db.url=${app.connection.db.url}
app.connection.db.username=${app.connection.db.username}
app.connection.db.password=${app.connection.db.password}


# Security
security.oauth2.resource.filter-order=3
security.signing-key=MaYzkSjmkzPC57L
security.encoding-strength=256
security.security-realm=Alchemist Auth Realm

security.jwt.client-id=alchemist-client-id
security.jwt.client-secret=XY7kmzoNzl100
security.jwt.grant-type=password
security.jwt.scope-read=read
security.jwt.scope-write=write
security.jwt.resource-ids=alchemist-resource-id